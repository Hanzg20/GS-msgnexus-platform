// Jinbean 便民应用数据库模式（简化版）
// 只包含聊天功能，不包含业务功能

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== 多租户系统 ====================

model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  apiKey    String   @unique @map("api_key")
  planType  String   @default("basic") @map("plan_type")
  settings  Json     @default("{}")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  users     User[]
  messages  Message[]
  conversations Conversation[]

  @@map("tenants")
}

// ==================== 用户系统 ====================

model User {
  id             String  @id @default(uuid())
  tenantId       String  @map("tenant_id")
  externalUserId String  @map("external_user_id")
  email          String?
  displayName    String  @map("display_name")
  avatarUrl      String? @map("avatar_url")
  phoneNumber    String? @map("phone_number")
  userType       String  @map("user_type") // customer, provider, admin
  isActive       Boolean @default(true) @map("is_active")
  preferences    Json    @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 关联关系
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages       Message[]
  conversations  ConversationParticipant[]

  @@unique([tenantId, externalUserId])
  @@index([tenantId, userType])
  @@index([tenantId, email])
  @@map("users")
}

// ==================== 对话系统 ====================

model Conversation {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  name        String?
  type        String   @default("direct") // direct, group
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages    Message[]
  participants ConversationParticipant[]

  @@index([tenantId, type, createdAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String @id @default(uuid())
  conversationId String @map("conversation_id")
  userId         String @map("user_id")
  role           String @default("member") // customer, provider, admin
  joinedAt       DateTime @default(now()) @map("joined_at")
  lastReadAt     DateTime? @map("last_read_at")

  // 关联关系
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

// ==================== 消息系统 ====================

model Message {
  id             String   @id @default(uuid())
  tenantId       String   @map("tenant_id")
  conversationId String   @map("conversation_id")
  senderId       String   @map("sender_id")
  messageType    String   @map("message_type") // text, image, voice, file, system
  content        Json
  replyToId      String?  @map("reply_to_id")
  status         String   @default("sent") // sent, delivered, read, failed
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 关联关系
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo        Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[] @relation("MessageReplies")

  @@index([tenantId, conversationId, createdAt])
  @@index([senderId, createdAt])
  @@map("messages")
}

// ==================== 系统配置 ====================

model SystemConfig {
  id    String @id @default(uuid())
  key   String @unique
  value Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
} 